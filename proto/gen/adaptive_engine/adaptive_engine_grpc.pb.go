// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: adaptive_engine.proto

package adaptive_engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdaptiveEngine_Prioritize_FullMethodName = "/adaptive_engine.AdaptiveEngine/Prioritize"
	AdaptiveEngine_Evaluate_FullMethodName   = "/adaptive_engine.AdaptiveEngine/Evaluate"
	AdaptiveEngine_Feedback_FullMethodName   = "/adaptive_engine.AdaptiveEngine/Feedback"
)

// AdaptiveEngineClient is the client API for AdaptiveEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdaptiveEngineClient interface {
	Prioritize(ctx context.Context, in *PrioritizeRequest, opts ...grpc.CallOption) (*PrioritizeResponse, error)
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error)
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
}

type adaptiveEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewAdaptiveEngineClient(cc grpc.ClientConnInterface) AdaptiveEngineClient {
	return &adaptiveEngineClient{cc}
}

func (c *adaptiveEngineClient) Prioritize(ctx context.Context, in *PrioritizeRequest, opts ...grpc.CallOption) (*PrioritizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrioritizeResponse)
	err := c.cc.Invoke(ctx, AdaptiveEngine_Prioritize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adaptiveEngineClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateResponse)
	err := c.cc.Invoke(ctx, AdaptiveEngine_Evaluate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adaptiveEngineClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, AdaptiveEngine_Feedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdaptiveEngineServer is the server API for AdaptiveEngine service.
// All implementations must embed UnimplementedAdaptiveEngineServer
// for forward compatibility.
type AdaptiveEngineServer interface {
	Prioritize(context.Context, *PrioritizeRequest) (*PrioritizeResponse, error)
	Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error)
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	mustEmbedUnimplementedAdaptiveEngineServer()
}

// UnimplementedAdaptiveEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdaptiveEngineServer struct{}

func (UnimplementedAdaptiveEngineServer) Prioritize(context.Context, *PrioritizeRequest) (*PrioritizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prioritize not implemented")
}
func (UnimplementedAdaptiveEngineServer) Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}
func (UnimplementedAdaptiveEngineServer) Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (UnimplementedAdaptiveEngineServer) mustEmbedUnimplementedAdaptiveEngineServer() {}
func (UnimplementedAdaptiveEngineServer) testEmbeddedByValue()                        {}

// UnsafeAdaptiveEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdaptiveEngineServer will
// result in compilation errors.
type UnsafeAdaptiveEngineServer interface {
	mustEmbedUnimplementedAdaptiveEngineServer()
}

func RegisterAdaptiveEngineServer(s grpc.ServiceRegistrar, srv AdaptiveEngineServer) {
	// If the following call pancis, it indicates UnimplementedAdaptiveEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdaptiveEngine_ServiceDesc, srv)
}

func _AdaptiveEngine_Prioritize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrioritizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptiveEngineServer).Prioritize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptiveEngine_Prioritize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptiveEngineServer).Prioritize(ctx, req.(*PrioritizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdaptiveEngine_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptiveEngineServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptiveEngine_Evaluate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptiveEngineServer).Evaluate(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdaptiveEngine_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdaptiveEngineServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdaptiveEngine_Feedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdaptiveEngineServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdaptiveEngine_ServiceDesc is the grpc.ServiceDesc for AdaptiveEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdaptiveEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adaptive_engine.AdaptiveEngine",
	HandlerType: (*AdaptiveEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prioritize",
			Handler:    _AdaptiveEngine_Prioritize_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _AdaptiveEngine_Evaluate_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _AdaptiveEngine_Feedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adaptive_engine.proto",
}
