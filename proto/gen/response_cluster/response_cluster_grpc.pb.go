// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: response_cluster.proto

package response_cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Similarity_Validate_FullMethodName  = "/response_cluster.Similarity/Validate"
	Similarity_IsSoft404_FullMethodName = "/response_cluster.Similarity/IsSoft404"
	Similarity_Cluster_FullMethodName   = "/response_cluster.Similarity/Cluster"
)

// SimilarityClient is the client API for Similarity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimilarityClient interface {
	Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
	IsSoft404(ctx context.Context, in *Soft404Request, opts ...grpc.CallOption) (*Soft404Response, error)
	Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
}

type similarityClient struct {
	cc grpc.ClientConnInterface
}

func NewSimilarityClient(cc grpc.ClientConnInterface) SimilarityClient {
	return &similarityClient{cc}
}

func (c *similarityClient) Validate(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, Similarity_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityClient) IsSoft404(ctx context.Context, in *Soft404Request, opts ...grpc.CallOption) (*Soft404Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Soft404Response)
	err := c.cc.Invoke(ctx, Similarity_IsSoft404_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityClient) Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, Similarity_Cluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimilarityServer is the server API for Similarity service.
// All implementations must embed UnimplementedSimilarityServer
// for forward compatibility.
type SimilarityServer interface {
	Validate(context.Context, *ValidationRequest) (*ValidationResponse, error)
	IsSoft404(context.Context, *Soft404Request) (*Soft404Response, error)
	Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	mustEmbedUnimplementedSimilarityServer()
}

// UnimplementedSimilarityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimilarityServer struct{}

func (UnimplementedSimilarityServer) Validate(context.Context, *ValidationRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedSimilarityServer) IsSoft404(context.Context, *Soft404Request) (*Soft404Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSoft404 not implemented")
}
func (UnimplementedSimilarityServer) Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cluster not implemented")
}
func (UnimplementedSimilarityServer) mustEmbedUnimplementedSimilarityServer() {}
func (UnimplementedSimilarityServer) testEmbeddedByValue()                    {}

// UnsafeSimilarityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimilarityServer will
// result in compilation errors.
type UnsafeSimilarityServer interface {
	mustEmbedUnimplementedSimilarityServer()
}

func RegisterSimilarityServer(s grpc.ServiceRegistrar, srv SimilarityServer) {
	// If the following call pancis, it indicates UnimplementedSimilarityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Similarity_ServiceDesc, srv)
}

func _Similarity_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Similarity_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServer).Validate(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Similarity_IsSoft404_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Soft404Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServer).IsSoft404(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Similarity_IsSoft404_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServer).IsSoft404(ctx, req.(*Soft404Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Similarity_Cluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServer).Cluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Similarity_Cluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServer).Cluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Similarity_ServiceDesc is the grpc.ServiceDesc for Similarity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Similarity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "response_cluster.Similarity",
	HandlerType: (*SimilarityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Similarity_Validate_Handler,
		},
		{
			MethodName: "IsSoft404",
			Handler:    _Similarity_IsSoft404_Handler,
		},
		{
			MethodName: "Cluster",
			Handler:    _Similarity_Cluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "response_cluster.proto",
}
