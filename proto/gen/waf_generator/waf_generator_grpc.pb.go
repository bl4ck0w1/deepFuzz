// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: waf_generator.proto

package waf_generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WAFGenerator_GenerateEvasion_FullMethodName     = "/waf_generator.WAFGenerator/GenerateEvasion"
	WAFGenerator_MutatePath_FullMethodName          = "/waf_generator.WAFGenerator/MutatePath"
	WAFGenerator_AdversarialFeedback_FullMethodName = "/waf_generator.WAFGenerator/AdversarialFeedback"
)

// WAFGeneratorClient is the client API for WAFGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WAFGeneratorClient interface {
	GenerateEvasion(ctx context.Context, in *EvadeRequest, opts ...grpc.CallOption) (*EvadeResponse, error)
	MutatePath(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	AdversarialFeedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
}

type wAFGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewWAFGeneratorClient(cc grpc.ClientConnInterface) WAFGeneratorClient {
	return &wAFGeneratorClient{cc}
}

func (c *wAFGeneratorClient) GenerateEvasion(ctx context.Context, in *EvadeRequest, opts ...grpc.CallOption) (*EvadeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvadeResponse)
	err := c.cc.Invoke(ctx, WAFGenerator_GenerateEvasion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFGeneratorClient) MutatePath(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateResponse)
	err := c.cc.Invoke(ctx, WAFGenerator_MutatePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFGeneratorClient) AdversarialFeedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, WAFGenerator_AdversarialFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WAFGeneratorServer is the server API for WAFGenerator service.
// All implementations must embed UnimplementedWAFGeneratorServer
// for forward compatibility.
type WAFGeneratorServer interface {
	GenerateEvasion(context.Context, *EvadeRequest) (*EvadeResponse, error)
	MutatePath(context.Context, *MutateRequest) (*MutateResponse, error)
	AdversarialFeedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	mustEmbedUnimplementedWAFGeneratorServer()
}

// UnimplementedWAFGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWAFGeneratorServer struct{}

func (UnimplementedWAFGeneratorServer) GenerateEvasion(context.Context, *EvadeRequest) (*EvadeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEvasion not implemented")
}
func (UnimplementedWAFGeneratorServer) MutatePath(context.Context, *MutateRequest) (*MutateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutatePath not implemented")
}
func (UnimplementedWAFGeneratorServer) AdversarialFeedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdversarialFeedback not implemented")
}
func (UnimplementedWAFGeneratorServer) mustEmbedUnimplementedWAFGeneratorServer() {}
func (UnimplementedWAFGeneratorServer) testEmbeddedByValue()                      {}

// UnsafeWAFGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WAFGeneratorServer will
// result in compilation errors.
type UnsafeWAFGeneratorServer interface {
	mustEmbedUnimplementedWAFGeneratorServer()
}

func RegisterWAFGeneratorServer(s grpc.ServiceRegistrar, srv WAFGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedWAFGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WAFGenerator_ServiceDesc, srv)
}

func _WAFGenerator_GenerateEvasion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvadeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFGeneratorServer).GenerateEvasion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WAFGenerator_GenerateEvasion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFGeneratorServer).GenerateEvasion(ctx, req.(*EvadeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFGenerator_MutatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFGeneratorServer).MutatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WAFGenerator_MutatePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFGeneratorServer).MutatePath(ctx, req.(*MutateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFGenerator_AdversarialFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFGeneratorServer).AdversarialFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WAFGenerator_AdversarialFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFGeneratorServer).AdversarialFeedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WAFGenerator_ServiceDesc is the grpc.ServiceDesc for WAFGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WAFGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waf_generator.WAFGenerator",
	HandlerType: (*WAFGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEvasion",
			Handler:    _WAFGenerator_GenerateEvasion_Handler,
		},
		{
			MethodName: "MutatePath",
			Handler:    _WAFGenerator_MutatePath_Handler,
		},
		{
			MethodName: "AdversarialFeedback",
			Handler:    _WAFGenerator_AdversarialFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waf_generator.proto",
}
